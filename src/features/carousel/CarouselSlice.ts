import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import {fetchCount} from "../counter/counterAPI";

export interface CarouselState {
    category: number,
    page: number,
    pageSize: number,
    status: 'idle' | 'loading' | 'failed';
}

const initialState: CarouselState = {
    category: 0,
    page:1,
    pageSize:10,
    status: 'idle',
};

export const incrementAsync = createAsyncThunk(
    'counter/fetchCount',
    async (amount: number) => {
        const response = await fetchCount(amount);
        // The value we return becomes the `fulfilled` action payload
        return response.data;
    }
);

export const carouselSlice = createSlice({
    name: 'carousel',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        incrementPage: (state) => {
            state.page += 1;
        },
        increment: (state) => {
            state.page += 1;
        },
        decrement: (state) => {
            state.page -= 1;
        },
        // Use the PayloadAction type to declare the contents of `action.payload`
        incrementByAmount: (state, action: PayloadAction<number>) => {
            state.page += action.payload;
        },
        setByAmount: (state, action: PayloadAction<number>) => {
            state.page = action.payload;
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(incrementAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(incrementAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.page += action.payload;
            });
    },
});

export const { increment, decrement, incrementByAmount, setByAmount } = carouselSlice.actions;

export const selectCount = (state: RootState) => state.carousel.page;

export const incrementIfOdd = (amount: number): AppThunk => (
    dispatch,
    getState
) => {
    const currentValue = selectCount(getState());
    if (currentValue % 2 === 1) {
        dispatch(incrementByAmount(amount));
    }
};

export default carouselSlice.reducer;
